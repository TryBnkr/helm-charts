# Default values for Bnkr.

## Bnkr port, default: 5000
port: "5000"
## Bnkr first user name, default: "John Doe"
username: "John Doe"
## Bnkr first user email, default: me@example.com
useremail: me@example.com
## Bnkr first user password, default to random generated one.
password: ""
## Either production or anything else, default: production
env: production
## Database timezone, default: Europe/Istanbul
tz: "Europe/Istanbul"
## Database SSL mode, default: disable
dbsslmode: disable
## If true then Bnkr will do the setup steps(like creating the first user, etc.) if no user created, default: false
setup: true
## Image to be used by Bnkr deployment.
image:
  repository: engrmth/bnkr
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2.0.9"

imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

## In order for Bnkr to be able to function properly like backing up files in pods, it needs to have permissions
## By enabling rbac Bnkr will use `cluster-admin` role for the service account.
## Other ways you can pass your service account.
rbac:
  create: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

## Only change podSecurityContext if you know what you are doing because Bnkr may need to be run as root to function properly.
podSecurityContext: {}
  # fsGroup: 2000

## Only change securityContext if you know what you are doing because Bnkr may need to be run as root to function properly.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

## If you enable postgresql then Bnkr will use `PostgreSQL packaged by Bitnami` under the hood to create the database.
## You can pass vales to the sub chart directly from here.
## Just notice that all the PostgreSQL chart values must go under the `postgresql` key.
## Refer to https://artifacthub.io/packages/helm/bitnami/postgresql/11.1.19 to learn more about what values you can set in postgresql section.
postgresql:
  enabled: true
  architecture: standalone
  global:
    postgresql:
      auth:
        postgresPassword: ""
        username: "bnkr"
        password: ""
        database: "bnkr"
      service:
        ports:
          postgresql: "5432"
  primary:
    persistence:
      enabled: true
      size: 8Gi

## Bnkr will fallback to these values if postgresql is not enabled.
## Please enter your PostgreSQL values here.
database:
  port: "5432"
  host: ""
  username: bnkr
  password: ""
  database: bnkr